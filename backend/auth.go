package main

import (
	"bytes"
	"crypto/sha256"
	"math/rand"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type user struct {
	session_id string
	is_guest   bool
	username   string
	data       string //will only be used for guests, since we don't want to store data generated by guests into database
}

var logged_users []user

//this function generates a session_id for any successful login activity
//it will store the successfully logged in user to (slice user), and return the generated session_id as a string
func generate_session_id(is_guest bool, username string) string {
	//for guests, the session_id is generated by calculating the hash of (the current time + a random number)
	if is_guest {
		ans_byte := sha256.Sum256([]byte(time.Now().String() + strconv.Itoa(rand.Intn(100))))
		ans := string(ans_byte[:])
		var to_append user = user{session_id: ans, is_guest: true, username: "", data: ""}
		logged_users = append(logged_users, to_append)
		return ans
	}

	//for registered users, the session_id is generated by calculating the hash of (the current time + username)
	ans_byte := sha256.Sum256([]byte(time.Now().String() + username))
	ans := string(ans_byte[:])
	var to_append user = user{session_id: ans, is_guest: false, username: username, data: ""}
	logged_users = append(logged_users, to_append)
	return ans
}

func login(w http.ResponseWriter, req *http.Request) {
	w.Header().Set("Content-Type", "text/plain; charset=UTF-8")

	buf := new(bytes.Buffer)
	buf.ReadFrom(req.Body)
	var content string = buf.String()

	//since any request with length 3 is not possibly valid, return immediately with 403
	if len(content) < 3 {
		w.WriteHeader(http.StatusForbidden)
		w.Write([]byte("Invalid credentials"))
		return
	}

	//if user wants to login as guest
	if content == "guest" {
		w.WriteHeader(http.StatusOK)
		var ssid string = generate_session_id(true, "")
		w.Write([]byte(ssid))
		return
	}

	data := strings.SplitAfter(content, ",")
	var username string = data[0]
	var passwd string = data[1]
	username = username[:len(username)-1] //notice this is asserted to be a hashed string

}
